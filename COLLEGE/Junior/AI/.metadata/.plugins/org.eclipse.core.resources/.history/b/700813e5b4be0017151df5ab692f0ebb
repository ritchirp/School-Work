import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class SudokuSolver {
	
	Node[][] variables;
	LinkedList<Node> assigned;
	int assignedCount; // number of variables with assigned values
	
	public SudokuSolver(){
		assignedCount = 0;
		assigned = new LinkedList<Node>();
	}
	
	public Node[][] solve(String fileName){
		parseFile(fileName);
		reduceInitialDomains();
		// recursive call
		return variables;
	}
	
	private List<Integer> leastConstrainingValue(Node n){
		Integer[][] conflictMap = new Integer[][]; // stores pairs of the form [value, conflicts]
		final int VALUE = 0;
		final int CONFLICTS = 1;
		
		Set<Node> children = n.children;
		List<Integer> domain = n.domain;
		
		for(int i=0; i<domain.size(); i++){
			int count = 0;
			Integer consideredValue = domain.get(i);
			// count how many domain reductions the choice causes
			for(Node child : children){
				if(child.domain.contains(consideredValue)) // there would be a reduction
					count++;
			}
			Integer[] temp = new Integer[2];
			temp[VALUE] = consideredValue;
			temp[CONFLICTS] = new Integer(count);
			conflictMap[i] = temp;
		}
		
		return null;
	}
	
	private void parseFile(String fileName){
		try{
			variables = new Node[9][9];
			Scanner in = new Scanner(new File(fileName));
			int row = 0;
			// fill in the nodes with info from the initial assignment
			while(in.hasNextLine() && row < 9){
				String currentRow = in.nextLine();
				for(int i=0; i<9; i++){
					Node toAdd = new Node();
					toAdd.row = row;
					toAdd.col = i;
					if(currentRow.charAt(i)== '-'){
						// Initialize a domain list and fill it with numbers 1-9
						LinkedList<Integer> thisDom = new LinkedList<>();
						for(int j = 1; j <= 9; j++){
							thisDom.add(new Integer(j));
						}
						toAdd.domain = thisDom;
						toAdd.value = 0; // indicates no assigned value
						
						variables[row][i] = toAdd;
					}
					else{
						LinkedList<Integer> thisDom = new LinkedList<Integer>();
						int val = currentRow.charAt(i) - '0';
						thisDom.add(new Integer(val));
						toAdd.domain = thisDom;
						toAdd.value = val;
						
						variables[row][i] = toAdd;
						assigned.add(toAdd);
					}
				}
				row++;
			}
			// Add children
			for(row = 0; row < variables.length; row++){
				for(int col = 0; col < variables[row].length; col++){
					addRowChildren(variables[row][col]);
					addColChildren(variables[row][col]);
					addSquareChildren(variables[row][col]);

				}
			}
			
		}
		catch(FileNotFoundException e){
			
		}
	}
	
	private void addRowChildren(Node n){
		for(int i=0; i<variables[n.row].length; i++){
			if(n.col != i)
				n.children.add(variables[n.row][i]);
		}
	}
	
	private void addColChildren(Node n){
		for(int i=0; i<variables.length; i++){
			if(n.row != i)
				n.children.add(variables[i][n.col]);
		}
	}
	
	private void addSquareChildren(Node n){
		int rowStart = n.row / 3;  // takes advantage of java integer division
		int colStart = n.col / 3;  // to find the coordinates of the square
		rowStart *= 3;
		colStart *= 3;
		
		for(int i = 0; i< 3; i++){
			for(int j = 0; j < 3; j++){
				int row = rowStart + i;
				int col = colStart + j;
				if(n.row != row && n.col != col)
					n.children.add(variables[row][col]);
			}
		}
	}
	
	private void reduceInitialDomains(){
		for(Node n : assigned){
			for(Node child : n.children){
				child.domain.remove(new Integer(n.value));
			}
		}
	}
	
}
