import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Scanner;

public class SudokuSolver {
	
	Node[][] variables;
	
	int assignedCount; // number of variables with assigned values
	
	
	private Node[][] solve(String fileName){
		parseFile(fileName);
		// forward check initial assignment
		// recursive call
		return null;
	}
	
	private void parseFile(String fileName){
		try{
			variables = new Node[9][9];
			Scanner in = new Scanner(new File(fileName));
			int row = 0;
			// fill in the nodes with info from the initial assignment
			while(in.hasNextLine()){
				String currentRow = in.nextLine();
				for(int i=0; i<9; i++){
					Node toAdd = new Node();
					toAdd.row = row;
					toAdd.col = i;
					if(currentRow.charAt(i)== '-'){
						// Initialize a domain list and fill it with numbers 1-9
						LinkedList<Integer> thisDom = new LinkedList<>();
						for(int j = 1; i <= 9; i++){
							thisDom.add(new Integer(j));
						}
						toAdd.domain = thisDom;
						toAdd.value = 0; // indicates no assigned value
						
						variables[row][i] = toAdd;
					}
					else{
						LinkedList<Integer> thisDom = new LinkedList<Integer>();
						int val = currentRow.charAt(i) - '0';
						thisDom.add(new Integer(val));
						toAdd.domain = thisDom;
						toAdd.value = val;
					}
				}
				row++;
			}
			// Add children
			
		}
		catch(FileNotFoundException e){
			
		}
	}
	
	private void reduceInitialDomains(){
		
	}
	
}
